#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace QuizManagementSystem.Models
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="QuizManagement")]
	public partial class QuizManagementDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertAnswer(Answer instance);
    partial void UpdateAnswer(Answer instance);
    partial void DeleteAnswer(Answer instance);
    partial void InsertUser(User instance);
    partial void UpdateUser(User instance);
    partial void DeleteUser(User instance);
    partial void InsertAnswerPracticeQuestion(AnswerPracticeQuestion instance);
    partial void UpdateAnswerPracticeQuestion(AnswerPracticeQuestion instance);
    partial void DeleteAnswerPracticeQuestion(AnswerPracticeQuestion instance);
    partial void InsertAnswerQuestion(AnswerQuestion instance);
    partial void UpdateAnswerQuestion(AnswerQuestion instance);
    partial void DeleteAnswerQuestion(AnswerQuestion instance);
    partial void InsertClass(Class instance);
    partial void UpdateClass(Class instance);
    partial void DeleteClass(Class instance);
    partial void InsertExam(Exam instance);
    partial void UpdateExam(Exam instance);
    partial void DeleteExam(Exam instance);
    partial void InsertExamQuiz(ExamQuiz instance);
    partial void UpdateExamQuiz(ExamQuiz instance);
    partial void DeleteExamQuiz(ExamQuiz instance);
    partial void InsertFormControl(FormControl instance);
    partial void UpdateFormControl(FormControl instance);
    partial void DeleteFormControl(FormControl instance);
    partial void InsertPracticeAnswer(PracticeAnswer instance);
    partial void UpdatePracticeAnswer(PracticeAnswer instance);
    partial void DeletePracticeAnswer(PracticeAnswer instance);
    partial void InsertPracticeQuestion(PracticeQuestion instance);
    partial void UpdatePracticeQuestion(PracticeQuestion instance);
    partial void DeletePracticeQuestion(PracticeQuestion instance);
    partial void InsertPracticeQuestionQuiz(PracticeQuestionQuiz instance);
    partial void UpdatePracticeQuestionQuiz(PracticeQuestionQuiz instance);
    partial void DeletePracticeQuestionQuiz(PracticeQuestionQuiz instance);
    partial void InsertQuestion(Question instance);
    partial void UpdateQuestion(Question instance);
    partial void DeleteQuestion(Question instance);
    partial void InsertQuestionLevel(QuestionLevel instance);
    partial void UpdateQuestionLevel(QuestionLevel instance);
    partial void DeleteQuestionLevel(QuestionLevel instance);
    partial void InsertQuestionQuiz(QuestionQuiz instance);
    partial void UpdateQuestionQuiz(QuestionQuiz instance);
    partial void DeleteQuestionQuiz(QuestionQuiz instance);
    partial void InsertQuiz(Quiz instance);
    partial void UpdateQuiz(Quiz instance);
    partial void DeleteQuiz(Quiz instance);
    partial void InsertRole(Role instance);
    partial void UpdateRole(Role instance);
    partial void DeleteRole(Role instance);
    partial void InsertRoleFormControl(RoleFormControl instance);
    partial void UpdateRoleFormControl(RoleFormControl instance);
    partial void DeleteRoleFormControl(RoleFormControl instance);
    partial void InsertRoleForSignup(RoleForSignup instance);
    partial void UpdateRoleForSignup(RoleForSignup instance);
    partial void DeleteRoleForSignup(RoleForSignup instance);
    partial void InsertSchoolLevel(SchoolLevel instance);
    partial void UpdateSchoolLevel(SchoolLevel instance);
    partial void DeleteSchoolLevel(SchoolLevel instance);
    partial void InsertStudent(Student instance);
    partial void UpdateStudent(Student instance);
    partial void DeleteStudent(Student instance);
    partial void InsertStudentUser(StudentUser instance);
    partial void UpdateStudentUser(StudentUser instance);
    partial void DeleteStudentUser(StudentUser instance);
    partial void InsertSubject(Subject instance);
    partial void UpdateSubject(Subject instance);
    partial void DeleteSubject(Subject instance);
    partial void InsertTakeQuiz(TakeQuiz instance);
    partial void UpdateTakeQuiz(TakeQuiz instance);
    partial void DeleteTakeQuiz(TakeQuiz instance);
    partial void InsertTakeQuizInExam(TakeQuizInExam instance);
    partial void UpdateTakeQuizInExam(TakeQuizInExam instance);
    partial void DeleteTakeQuizInExam(TakeQuizInExam instance);
    partial void InsertTeacher(Teacher instance);
    partial void UpdateTeacher(Teacher instance);
    partial void DeleteTeacher(Teacher instance);
    partial void InsertTeacherUser(TeacherUser instance);
    partial void UpdateTeacherUser(TeacherUser instance);
    partial void DeleteTeacherUser(TeacherUser instance);
    #endregion
		
		public QuizManagementDataContext() : 
				base(global::QuizManagementSystem.Properties.Settings.Default.QuizManagementConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public QuizManagementDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public QuizManagementDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public QuizManagementDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public QuizManagementDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Answer> Answers
		{
			get
			{
				return this.GetTable<Answer>();
			}
		}
		
		public System.Data.Linq.Table<User> Users
		{
			get
			{
				return this.GetTable<User>();
			}
		}
		
		public System.Data.Linq.Table<AnswerPracticeQuestion> AnswerPracticeQuestions
		{
			get
			{
				return this.GetTable<AnswerPracticeQuestion>();
			}
		}
		
		public System.Data.Linq.Table<AnswerQuestion> AnswerQuestions
		{
			get
			{
				return this.GetTable<AnswerQuestion>();
			}
		}
		
		public System.Data.Linq.Table<Class> Classes
		{
			get
			{
				return this.GetTable<Class>();
			}
		}
		
		public System.Data.Linq.Table<Exam> Exams
		{
			get
			{
				return this.GetTable<Exam>();
			}
		}
		
		public System.Data.Linq.Table<ExamQuiz> ExamQuizs
		{
			get
			{
				return this.GetTable<ExamQuiz>();
			}
		}
		
		public System.Data.Linq.Table<FormControl> FormControls
		{
			get
			{
				return this.GetTable<FormControl>();
			}
		}
		
		public System.Data.Linq.Table<PracticeAnswer> PracticeAnswers
		{
			get
			{
				return this.GetTable<PracticeAnswer>();
			}
		}
		
		public System.Data.Linq.Table<PracticeQuestion> PracticeQuestions
		{
			get
			{
				return this.GetTable<PracticeQuestion>();
			}
		}
		
		public System.Data.Linq.Table<PracticeQuestionQuiz> PracticeQuestionQuizs
		{
			get
			{
				return this.GetTable<PracticeQuestionQuiz>();
			}
		}
		
		public System.Data.Linq.Table<Question> Questions
		{
			get
			{
				return this.GetTable<Question>();
			}
		}
		
		public System.Data.Linq.Table<QuestionLevel> QuestionLevels
		{
			get
			{
				return this.GetTable<QuestionLevel>();
			}
		}
		
		public System.Data.Linq.Table<QuestionQuiz> QuestionQuizs
		{
			get
			{
				return this.GetTable<QuestionQuiz>();
			}
		}
		
		public System.Data.Linq.Table<Quiz> Quizs
		{
			get
			{
				return this.GetTable<Quiz>();
			}
		}
		
		public System.Data.Linq.Table<Role> Roles
		{
			get
			{
				return this.GetTable<Role>();
			}
		}
		
		public System.Data.Linq.Table<RoleFormControl> RoleFormControls
		{
			get
			{
				return this.GetTable<RoleFormControl>();
			}
		}
		
		public System.Data.Linq.Table<RoleForSignup> RoleForSignups
		{
			get
			{
				return this.GetTable<RoleForSignup>();
			}
		}
		
		public System.Data.Linq.Table<SchoolLevel> SchoolLevels
		{
			get
			{
				return this.GetTable<SchoolLevel>();
			}
		}
		
		public System.Data.Linq.Table<Student> Students
		{
			get
			{
				return this.GetTable<Student>();
			}
		}
		
		public System.Data.Linq.Table<StudentUser> StudentUsers
		{
			get
			{
				return this.GetTable<StudentUser>();
			}
		}
		
		public System.Data.Linq.Table<Subject> Subjects
		{
			get
			{
				return this.GetTable<Subject>();
			}
		}
		
		public System.Data.Linq.Table<TakeQuiz> TakeQuizs
		{
			get
			{
				return this.GetTable<TakeQuiz>();
			}
		}
		
		public System.Data.Linq.Table<TakeQuizInExam> TakeQuizInExams
		{
			get
			{
				return this.GetTable<TakeQuizInExam>();
			}
		}
		
		public System.Data.Linq.Table<Teacher> Teachers
		{
			get
			{
				return this.GetTable<Teacher>();
			}
		}
		
		public System.Data.Linq.Table<TeacherUser> TeacherUsers
		{
			get
			{
				return this.GetTable<TeacherUser>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Answer")]
	public partial class Answer : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _answerID;
		
		private string _description;
		
		private System.Nullable<int> _questionID;
		
		private System.Nullable<bool> _isCorrect;
		
		private EntityRef<Question> _Question;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnanswerIDChanging(int value);
    partial void OnanswerIDChanged();
    partial void OndescriptionChanging(string value);
    partial void OndescriptionChanged();
    partial void OnquestionIDChanging(System.Nullable<int> value);
    partial void OnquestionIDChanged();
    partial void OnisCorrectChanging(System.Nullable<bool> value);
    partial void OnisCorrectChanged();
    #endregion
		
		public Answer()
		{
			this._Question = default(EntityRef<Question>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_answerID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int answerID
		{
			get
			{
				return this._answerID;
			}
			set
			{
				if ((this._answerID != value))
				{
					this.OnanswerIDChanging(value);
					this.SendPropertyChanging();
					this._answerID = value;
					this.SendPropertyChanged("answerID");
					this.OnanswerIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_description", DbType="NVarChar(1000)")]
		public string description
		{
			get
			{
				return this._description;
			}
			set
			{
				if ((this._description != value))
				{
					this.OndescriptionChanging(value);
					this.SendPropertyChanging();
					this._description = value;
					this.SendPropertyChanged("description");
					this.OndescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_questionID", DbType="Int")]
		public System.Nullable<int> questionID
		{
			get
			{
				return this._questionID;
			}
			set
			{
				if ((this._questionID != value))
				{
					if (this._Question.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnquestionIDChanging(value);
					this.SendPropertyChanging();
					this._questionID = value;
					this.SendPropertyChanged("questionID");
					this.OnquestionIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_isCorrect", DbType="Bit")]
		public System.Nullable<bool> isCorrect
		{
			get
			{
				return this._isCorrect;
			}
			set
			{
				if ((this._isCorrect != value))
				{
					this.OnisCorrectChanging(value);
					this.SendPropertyChanging();
					this._isCorrect = value;
					this.SendPropertyChanged("isCorrect");
					this.OnisCorrectChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Question_Answer", Storage="_Question", ThisKey="questionID", OtherKey="questionID", IsForeignKey=true, DeleteRule="CASCADE")]
		public Question Question
		{
			get
			{
				return this._Question.Entity;
			}
			set
			{
				Question previousValue = this._Question.Entity;
				if (((previousValue != value) 
							|| (this._Question.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Question.Entity = null;
						previousValue.Answers.Remove(this);
					}
					this._Question.Entity = value;
					if ((value != null))
					{
						value.Answers.Add(this);
						this._questionID = value.questionID;
					}
					else
					{
						this._questionID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Question");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.[User]")]
	public partial class User : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _username;
		
		private string _password;
		
		private System.Nullable<int> _roleID;
		
		private EntityRef<StudentUser> _StudentUser;
		
		private EntityRef<TeacherUser> _TeacherUser;
		
		private EntityRef<Role> _Role;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnusernameChanging(string value);
    partial void OnusernameChanged();
    partial void OnpasswordChanging(string value);
    partial void OnpasswordChanged();
    partial void OnroleIDChanging(System.Nullable<int> value);
    partial void OnroleIDChanged();
    #endregion
		
		public User()
		{
			this._StudentUser = default(EntityRef<StudentUser>);
			this._TeacherUser = default(EntityRef<TeacherUser>);
			this._Role = default(EntityRef<Role>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_username", DbType="VarChar(20) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string username
		{
			get
			{
				return this._username;
			}
			set
			{
				if ((this._username != value))
				{
					this.OnusernameChanging(value);
					this.SendPropertyChanging();
					this._username = value;
					this.SendPropertyChanged("username");
					this.OnusernameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_password", DbType="VarChar(255)")]
		public string password
		{
			get
			{
				return this._password;
			}
			set
			{
				if ((this._password != value))
				{
					this.OnpasswordChanging(value);
					this.SendPropertyChanging();
					this._password = value;
					this.SendPropertyChanged("password");
					this.OnpasswordChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_roleID", DbType="Int")]
		public System.Nullable<int> roleID
		{
			get
			{
				return this._roleID;
			}
			set
			{
				if ((this._roleID != value))
				{
					if (this._Role.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnroleIDChanging(value);
					this.SendPropertyChanging();
					this._roleID = value;
					this.SendPropertyChanged("roleID");
					this.OnroleIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_StudentUser", Storage="_StudentUser", ThisKey="username", OtherKey="username", IsUnique=true, IsForeignKey=false)]
		public StudentUser StudentUser
		{
			get
			{
				return this._StudentUser.Entity;
			}
			set
			{
				StudentUser previousValue = this._StudentUser.Entity;
				if (((previousValue != value) 
							|| (this._StudentUser.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._StudentUser.Entity = null;
						previousValue.User = null;
					}
					this._StudentUser.Entity = value;
					if ((value != null))
					{
						value.User = this;
					}
					this.SendPropertyChanged("StudentUser");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_TeacherUser", Storage="_TeacherUser", ThisKey="username", OtherKey="username", IsUnique=true, IsForeignKey=false)]
		public TeacherUser TeacherUser
		{
			get
			{
				return this._TeacherUser.Entity;
			}
			set
			{
				TeacherUser previousValue = this._TeacherUser.Entity;
				if (((previousValue != value) 
							|| (this._TeacherUser.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._TeacherUser.Entity = null;
						previousValue.User = null;
					}
					this._TeacherUser.Entity = value;
					if ((value != null))
					{
						value.User = this;
					}
					this.SendPropertyChanged("TeacherUser");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Role_User", Storage="_Role", ThisKey="roleID", OtherKey="roleID", IsForeignKey=true, DeleteRule="SET NULL")]
		public Role Role
		{
			get
			{
				return this._Role.Entity;
			}
			set
			{
				Role previousValue = this._Role.Entity;
				if (((previousValue != value) 
							|| (this._Role.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Role.Entity = null;
						previousValue.Users.Remove(this);
					}
					this._Role.Entity = value;
					if ((value != null))
					{
						value.Users.Add(this);
						this._roleID = value.roleID;
					}
					else
					{
						this._roleID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Role");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.AnswerPracticeQuestion")]
	public partial class AnswerPracticeQuestion : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _username;
		
		private int _practiceQuestionID;
		
		private System.DateTime _dateAttempt;
		
		private System.Nullable<bool> _isCorrect;
		
		private EntityRef<PracticeQuestion> _PracticeQuestion;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnusernameChanging(string value);
    partial void OnusernameChanged();
    partial void OnpracticeQuestionIDChanging(int value);
    partial void OnpracticeQuestionIDChanged();
    partial void OndateAttemptChanging(System.DateTime value);
    partial void OndateAttemptChanged();
    partial void OnisCorrectChanging(System.Nullable<bool> value);
    partial void OnisCorrectChanged();
    #endregion
		
		public AnswerPracticeQuestion()
		{
			this._PracticeQuestion = default(EntityRef<PracticeQuestion>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_username", DbType="VarChar(20) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string username
		{
			get
			{
				return this._username;
			}
			set
			{
				if ((this._username != value))
				{
					this.OnusernameChanging(value);
					this.SendPropertyChanging();
					this._username = value;
					this.SendPropertyChanged("username");
					this.OnusernameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_practiceQuestionID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int practiceQuestionID
		{
			get
			{
				return this._practiceQuestionID;
			}
			set
			{
				if ((this._practiceQuestionID != value))
				{
					if (this._PracticeQuestion.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnpracticeQuestionIDChanging(value);
					this.SendPropertyChanging();
					this._practiceQuestionID = value;
					this.SendPropertyChanged("practiceQuestionID");
					this.OnpracticeQuestionIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_dateAttempt", DbType="Date NOT NULL", IsPrimaryKey=true)]
		public System.DateTime dateAttempt
		{
			get
			{
				return this._dateAttempt;
			}
			set
			{
				if ((this._dateAttempt != value))
				{
					this.OndateAttemptChanging(value);
					this.SendPropertyChanging();
					this._dateAttempt = value;
					this.SendPropertyChanged("dateAttempt");
					this.OndateAttemptChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_isCorrect", DbType="Bit")]
		public System.Nullable<bool> isCorrect
		{
			get
			{
				return this._isCorrect;
			}
			set
			{
				if ((this._isCorrect != value))
				{
					this.OnisCorrectChanging(value);
					this.SendPropertyChanging();
					this._isCorrect = value;
					this.SendPropertyChanged("isCorrect");
					this.OnisCorrectChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PracticeQuestion_AnswerPracticeQuestion", Storage="_PracticeQuestion", ThisKey="practiceQuestionID", OtherKey="practiceQuestionID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public PracticeQuestion PracticeQuestion
		{
			get
			{
				return this._PracticeQuestion.Entity;
			}
			set
			{
				PracticeQuestion previousValue = this._PracticeQuestion.Entity;
				if (((previousValue != value) 
							|| (this._PracticeQuestion.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._PracticeQuestion.Entity = null;
						previousValue.AnswerPracticeQuestions.Remove(this);
					}
					this._PracticeQuestion.Entity = value;
					if ((value != null))
					{
						value.AnswerPracticeQuestions.Add(this);
						this._practiceQuestionID = value.practiceQuestionID;
					}
					else
					{
						this._practiceQuestionID = default(int);
					}
					this.SendPropertyChanged("PracticeQuestion");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.AnswerQuestion")]
	public partial class AnswerQuestion : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _username;
		
		private int _questionID;
		
		private System.DateTime _dateAttempt;
		
		private System.Nullable<bool> _isCorrect;
		
		private EntityRef<Question> _Question;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnusernameChanging(string value);
    partial void OnusernameChanged();
    partial void OnquestionIDChanging(int value);
    partial void OnquestionIDChanged();
    partial void OndateAttemptChanging(System.DateTime value);
    partial void OndateAttemptChanged();
    partial void OnisCorrectChanging(System.Nullable<bool> value);
    partial void OnisCorrectChanged();
    #endregion
		
		public AnswerQuestion()
		{
			this._Question = default(EntityRef<Question>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_username", DbType="VarChar(20) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string username
		{
			get
			{
				return this._username;
			}
			set
			{
				if ((this._username != value))
				{
					this.OnusernameChanging(value);
					this.SendPropertyChanging();
					this._username = value;
					this.SendPropertyChanged("username");
					this.OnusernameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_questionID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int questionID
		{
			get
			{
				return this._questionID;
			}
			set
			{
				if ((this._questionID != value))
				{
					if (this._Question.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnquestionIDChanging(value);
					this.SendPropertyChanging();
					this._questionID = value;
					this.SendPropertyChanged("questionID");
					this.OnquestionIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_dateAttempt", DbType="Date NOT NULL", IsPrimaryKey=true)]
		public System.DateTime dateAttempt
		{
			get
			{
				return this._dateAttempt;
			}
			set
			{
				if ((this._dateAttempt != value))
				{
					this.OndateAttemptChanging(value);
					this.SendPropertyChanging();
					this._dateAttempt = value;
					this.SendPropertyChanged("dateAttempt");
					this.OndateAttemptChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_isCorrect", DbType="Bit")]
		public System.Nullable<bool> isCorrect
		{
			get
			{
				return this._isCorrect;
			}
			set
			{
				if ((this._isCorrect != value))
				{
					this.OnisCorrectChanging(value);
					this.SendPropertyChanging();
					this._isCorrect = value;
					this.SendPropertyChanged("isCorrect");
					this.OnisCorrectChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Question_AnswerQuestion", Storage="_Question", ThisKey="questionID", OtherKey="questionID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Question Question
		{
			get
			{
				return this._Question.Entity;
			}
			set
			{
				Question previousValue = this._Question.Entity;
				if (((previousValue != value) 
							|| (this._Question.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Question.Entity = null;
						previousValue.AnswerQuestions.Remove(this);
					}
					this._Question.Entity = value;
					if ((value != null))
					{
						value.AnswerQuestions.Add(this);
						this._questionID = value.questionID;
					}
					else
					{
						this._questionID = default(int);
					}
					this.SendPropertyChanged("Question");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Class")]
	public partial class Class : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _classID;
		
		private System.Nullable<int> _schoolLevelID;
		
		private string _name;
		
		private EntitySet<Student> _Students;
		
		private EntityRef<SchoolLevel> _SchoolLevel;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnclassIDChanging(int value);
    partial void OnclassIDChanged();
    partial void OnschoolLevelIDChanging(System.Nullable<int> value);
    partial void OnschoolLevelIDChanged();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    #endregion
		
		public Class()
		{
			this._Students = new EntitySet<Student>(new Action<Student>(this.attach_Students), new Action<Student>(this.detach_Students));
			this._SchoolLevel = default(EntityRef<SchoolLevel>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_classID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int classID
		{
			get
			{
				return this._classID;
			}
			set
			{
				if ((this._classID != value))
				{
					this.OnclassIDChanging(value);
					this.SendPropertyChanging();
					this._classID = value;
					this.SendPropertyChanged("classID");
					this.OnclassIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_schoolLevelID", DbType="Int")]
		public System.Nullable<int> schoolLevelID
		{
			get
			{
				return this._schoolLevelID;
			}
			set
			{
				if ((this._schoolLevelID != value))
				{
					if (this._SchoolLevel.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnschoolLevelIDChanging(value);
					this.SendPropertyChanging();
					this._schoolLevelID = value;
					this.SendPropertyChanged("schoolLevelID");
					this.OnschoolLevelIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_name", DbType="NVarChar(50)")]
		public string name
		{
			get
			{
				return this._name;
			}
			set
			{
				if ((this._name != value))
				{
					this.OnnameChanging(value);
					this.SendPropertyChanging();
					this._name = value;
					this.SendPropertyChanged("name");
					this.OnnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Class_Student", Storage="_Students", ThisKey="classID", OtherKey="classID")]
		public EntitySet<Student> Students
		{
			get
			{
				return this._Students;
			}
			set
			{
				this._Students.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SchoolLevel_Class", Storage="_SchoolLevel", ThisKey="schoolLevelID", OtherKey="schoolLevelID", IsForeignKey=true, DeleteRule="SET NULL")]
		public SchoolLevel SchoolLevel
		{
			get
			{
				return this._SchoolLevel.Entity;
			}
			set
			{
				SchoolLevel previousValue = this._SchoolLevel.Entity;
				if (((previousValue != value) 
							|| (this._SchoolLevel.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._SchoolLevel.Entity = null;
						previousValue.Classes.Remove(this);
					}
					this._SchoolLevel.Entity = value;
					if ((value != null))
					{
						value.Classes.Add(this);
						this._schoolLevelID = value.schoolLevelID;
					}
					else
					{
						this._schoolLevelID = default(Nullable<int>);
					}
					this.SendPropertyChanged("SchoolLevel");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Students(Student entity)
		{
			this.SendPropertyChanging();
			entity.Class = this;
		}
		
		private void detach_Students(Student entity)
		{
			this.SendPropertyChanging();
			entity.Class = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Exam")]
	public partial class Exam : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _examID;
		
		private string _description;
		
		private System.Nullable<bool> _type;
		
		private string _createBy;
		
		private string _lastModifiedBy;
		
		private EntitySet<ExamQuiz> _ExamQuizs;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnexamIDChanging(int value);
    partial void OnexamIDChanged();
    partial void OndescriptionChanging(string value);
    partial void OndescriptionChanged();
    partial void OntypeChanging(System.Nullable<bool> value);
    partial void OntypeChanged();
    partial void OncreateByChanging(string value);
    partial void OncreateByChanged();
    partial void OnlastModifiedByChanging(string value);
    partial void OnlastModifiedByChanged();
    #endregion
		
		public Exam()
		{
			this._ExamQuizs = new EntitySet<ExamQuiz>(new Action<ExamQuiz>(this.attach_ExamQuizs), new Action<ExamQuiz>(this.detach_ExamQuizs));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_examID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int examID
		{
			get
			{
				return this._examID;
			}
			set
			{
				if ((this._examID != value))
				{
					this.OnexamIDChanging(value);
					this.SendPropertyChanging();
					this._examID = value;
					this.SendPropertyChanged("examID");
					this.OnexamIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_description", DbType="NVarChar(100)")]
		public string description
		{
			get
			{
				return this._description;
			}
			set
			{
				if ((this._description != value))
				{
					this.OndescriptionChanging(value);
					this.SendPropertyChanging();
					this._description = value;
					this.SendPropertyChanged("description");
					this.OndescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_type", DbType="Bit")]
		public System.Nullable<bool> type
		{
			get
			{
				return this._type;
			}
			set
			{
				if ((this._type != value))
				{
					this.OntypeChanging(value);
					this.SendPropertyChanging();
					this._type = value;
					this.SendPropertyChanged("type");
					this.OntypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_createBy", DbType="VarChar(50)")]
		public string createBy
		{
			get
			{
				return this._createBy;
			}
			set
			{
				if ((this._createBy != value))
				{
					this.OncreateByChanging(value);
					this.SendPropertyChanging();
					this._createBy = value;
					this.SendPropertyChanged("createBy");
					this.OncreateByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_lastModifiedBy", DbType="VarChar(50)")]
		public string lastModifiedBy
		{
			get
			{
				return this._lastModifiedBy;
			}
			set
			{
				if ((this._lastModifiedBy != value))
				{
					this.OnlastModifiedByChanging(value);
					this.SendPropertyChanging();
					this._lastModifiedBy = value;
					this.SendPropertyChanged("lastModifiedBy");
					this.OnlastModifiedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Exam_ExamQuiz", Storage="_ExamQuizs", ThisKey="examID", OtherKey="examID")]
		public EntitySet<ExamQuiz> ExamQuizs
		{
			get
			{
				return this._ExamQuizs;
			}
			set
			{
				this._ExamQuizs.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ExamQuizs(ExamQuiz entity)
		{
			this.SendPropertyChanging();
			entity.Exam = this;
		}
		
		private void detach_ExamQuizs(ExamQuiz entity)
		{
			this.SendPropertyChanging();
			entity.Exam = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ExamQuiz")]
	public partial class ExamQuiz : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _quizID;
		
		private int _examID;
		
		private EntitySet<TakeQuizInExam> _TakeQuizInExams;
		
		private EntityRef<Exam> _Exam;
		
		private EntityRef<Quiz> _Quiz;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnquizIDChanging(int value);
    partial void OnquizIDChanged();
    partial void OnexamIDChanging(int value);
    partial void OnexamIDChanged();
    #endregion
		
		public ExamQuiz()
		{
			this._TakeQuizInExams = new EntitySet<TakeQuizInExam>(new Action<TakeQuizInExam>(this.attach_TakeQuizInExams), new Action<TakeQuizInExam>(this.detach_TakeQuizInExams));
			this._Exam = default(EntityRef<Exam>);
			this._Quiz = default(EntityRef<Quiz>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_quizID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int quizID
		{
			get
			{
				return this._quizID;
			}
			set
			{
				if ((this._quizID != value))
				{
					if (this._Quiz.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnquizIDChanging(value);
					this.SendPropertyChanging();
					this._quizID = value;
					this.SendPropertyChanged("quizID");
					this.OnquizIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_examID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int examID
		{
			get
			{
				return this._examID;
			}
			set
			{
				if ((this._examID != value))
				{
					if (this._Exam.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnexamIDChanging(value);
					this.SendPropertyChanging();
					this._examID = value;
					this.SendPropertyChanged("examID");
					this.OnexamIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ExamQuiz_TakeQuizInExam", Storage="_TakeQuizInExams", ThisKey="quizID,examID", OtherKey="quizID,examID")]
		public EntitySet<TakeQuizInExam> TakeQuizInExams
		{
			get
			{
				return this._TakeQuizInExams;
			}
			set
			{
				this._TakeQuizInExams.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Exam_ExamQuiz", Storage="_Exam", ThisKey="examID", OtherKey="examID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Exam Exam
		{
			get
			{
				return this._Exam.Entity;
			}
			set
			{
				Exam previousValue = this._Exam.Entity;
				if (((previousValue != value) 
							|| (this._Exam.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Exam.Entity = null;
						previousValue.ExamQuizs.Remove(this);
					}
					this._Exam.Entity = value;
					if ((value != null))
					{
						value.ExamQuizs.Add(this);
						this._examID = value.examID;
					}
					else
					{
						this._examID = default(int);
					}
					this.SendPropertyChanged("Exam");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Quiz_ExamQuiz", Storage="_Quiz", ThisKey="quizID", OtherKey="quizID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Quiz Quiz
		{
			get
			{
				return this._Quiz.Entity;
			}
			set
			{
				Quiz previousValue = this._Quiz.Entity;
				if (((previousValue != value) 
							|| (this._Quiz.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Quiz.Entity = null;
						previousValue.ExamQuizs.Remove(this);
					}
					this._Quiz.Entity = value;
					if ((value != null))
					{
						value.ExamQuizs.Add(this);
						this._quizID = value.quizID;
					}
					else
					{
						this._quizID = default(int);
					}
					this.SendPropertyChanged("Quiz");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_TakeQuizInExams(TakeQuizInExam entity)
		{
			this.SendPropertyChanging();
			entity.ExamQuiz = this;
		}
		
		private void detach_TakeQuizInExams(TakeQuizInExam entity)
		{
			this.SendPropertyChanging();
			entity.ExamQuiz = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.FormControl")]
	public partial class FormControl : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _form;
		
		private string _control;
		
		private EntitySet<RoleFormControl> _RoleFormControls;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnformChanging(string value);
    partial void OnformChanged();
    partial void OncontrolChanging(string value);
    partial void OncontrolChanged();
    #endregion
		
		public FormControl()
		{
			this._RoleFormControls = new EntitySet<RoleFormControl>(new Action<RoleFormControl>(this.attach_RoleFormControls), new Action<RoleFormControl>(this.detach_RoleFormControls));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_form", DbType="VarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string form
		{
			get
			{
				return this._form;
			}
			set
			{
				if ((this._form != value))
				{
					this.OnformChanging(value);
					this.SendPropertyChanging();
					this._form = value;
					this.SendPropertyChanged("form");
					this.OnformChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_control", DbType="VarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string control
		{
			get
			{
				return this._control;
			}
			set
			{
				if ((this._control != value))
				{
					this.OncontrolChanging(value);
					this.SendPropertyChanging();
					this._control = value;
					this.SendPropertyChanged("control");
					this.OncontrolChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FormControl_RoleFormControl", Storage="_RoleFormControls", ThisKey="form,control", OtherKey="form,control")]
		public EntitySet<RoleFormControl> RoleFormControls
		{
			get
			{
				return this._RoleFormControls;
			}
			set
			{
				this._RoleFormControls.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_RoleFormControls(RoleFormControl entity)
		{
			this.SendPropertyChanging();
			entity.FormControl = this;
		}
		
		private void detach_RoleFormControls(RoleFormControl entity)
		{
			this.SendPropertyChanging();
			entity.FormControl = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.PracticeAnswer")]
	public partial class PracticeAnswer : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _practiceAnswerID;
		
		private string _description;
		
		private System.Nullable<int> _practiceQuestionID;
		
		private System.Nullable<bool> _isCorrect;
		
		private EntityRef<PracticeQuestion> _PracticeQuestion;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnpracticeAnswerIDChanging(int value);
    partial void OnpracticeAnswerIDChanged();
    partial void OndescriptionChanging(string value);
    partial void OndescriptionChanged();
    partial void OnpracticeQuestionIDChanging(System.Nullable<int> value);
    partial void OnpracticeQuestionIDChanged();
    partial void OnisCorrectChanging(System.Nullable<bool> value);
    partial void OnisCorrectChanged();
    #endregion
		
		public PracticeAnswer()
		{
			this._PracticeQuestion = default(EntityRef<PracticeQuestion>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_practiceAnswerID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int practiceAnswerID
		{
			get
			{
				return this._practiceAnswerID;
			}
			set
			{
				if ((this._practiceAnswerID != value))
				{
					this.OnpracticeAnswerIDChanging(value);
					this.SendPropertyChanging();
					this._practiceAnswerID = value;
					this.SendPropertyChanged("practiceAnswerID");
					this.OnpracticeAnswerIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_description", DbType="NVarChar(1000)")]
		public string description
		{
			get
			{
				return this._description;
			}
			set
			{
				if ((this._description != value))
				{
					this.OndescriptionChanging(value);
					this.SendPropertyChanging();
					this._description = value;
					this.SendPropertyChanged("description");
					this.OndescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_practiceQuestionID", DbType="Int")]
		public System.Nullable<int> practiceQuestionID
		{
			get
			{
				return this._practiceQuestionID;
			}
			set
			{
				if ((this._practiceQuestionID != value))
				{
					if (this._PracticeQuestion.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnpracticeQuestionIDChanging(value);
					this.SendPropertyChanging();
					this._practiceQuestionID = value;
					this.SendPropertyChanged("practiceQuestionID");
					this.OnpracticeQuestionIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_isCorrect", DbType="Bit")]
		public System.Nullable<bool> isCorrect
		{
			get
			{
				return this._isCorrect;
			}
			set
			{
				if ((this._isCorrect != value))
				{
					this.OnisCorrectChanging(value);
					this.SendPropertyChanging();
					this._isCorrect = value;
					this.SendPropertyChanged("isCorrect");
					this.OnisCorrectChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PracticeQuestion_PracticeAnswer", Storage="_PracticeQuestion", ThisKey="practiceQuestionID", OtherKey="practiceQuestionID", IsForeignKey=true, DeleteRule="CASCADE")]
		public PracticeQuestion PracticeQuestion
		{
			get
			{
				return this._PracticeQuestion.Entity;
			}
			set
			{
				PracticeQuestion previousValue = this._PracticeQuestion.Entity;
				if (((previousValue != value) 
							|| (this._PracticeQuestion.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._PracticeQuestion.Entity = null;
						previousValue.PracticeAnswers.Remove(this);
					}
					this._PracticeQuestion.Entity = value;
					if ((value != null))
					{
						value.PracticeAnswers.Add(this);
						this._practiceQuestionID = value.practiceQuestionID;
					}
					else
					{
						this._practiceQuestionID = default(Nullable<int>);
					}
					this.SendPropertyChanged("PracticeQuestion");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.PracticeQuestion")]
	public partial class PracticeQuestion : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _practiceQuestionID;
		
		private string _description;
		
		private System.Nullable<int> _questionLevelID;
		
		private System.Nullable<int> _subjectID;
		
		private System.Nullable<int> _schoolLevelID;
		
		private string _contribBy;
		
		private string _verifyBy;
		
		private EntitySet<AnswerPracticeQuestion> _AnswerPracticeQuestions;
		
		private EntitySet<PracticeAnswer> _PracticeAnswers;
		
		private EntitySet<PracticeQuestionQuiz> _PracticeQuestionQuizs;
		
		private EntityRef<QuestionLevel> _QuestionLevel;
		
		private EntityRef<SchoolLevel> _SchoolLevel;
		
		private EntityRef<Subject> _Subject;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnpracticeQuestionIDChanging(int value);
    partial void OnpracticeQuestionIDChanged();
    partial void OndescriptionChanging(string value);
    partial void OndescriptionChanged();
    partial void OnquestionLevelIDChanging(System.Nullable<int> value);
    partial void OnquestionLevelIDChanged();
    partial void OnsubjectIDChanging(System.Nullable<int> value);
    partial void OnsubjectIDChanged();
    partial void OnschoolLevelIDChanging(System.Nullable<int> value);
    partial void OnschoolLevelIDChanged();
    partial void OncontribByChanging(string value);
    partial void OncontribByChanged();
    partial void OnverifyByChanging(string value);
    partial void OnverifyByChanged();
    #endregion
		
		public PracticeQuestion()
		{
			this._AnswerPracticeQuestions = new EntitySet<AnswerPracticeQuestion>(new Action<AnswerPracticeQuestion>(this.attach_AnswerPracticeQuestions), new Action<AnswerPracticeQuestion>(this.detach_AnswerPracticeQuestions));
			this._PracticeAnswers = new EntitySet<PracticeAnswer>(new Action<PracticeAnswer>(this.attach_PracticeAnswers), new Action<PracticeAnswer>(this.detach_PracticeAnswers));
			this._PracticeQuestionQuizs = new EntitySet<PracticeQuestionQuiz>(new Action<PracticeQuestionQuiz>(this.attach_PracticeQuestionQuizs), new Action<PracticeQuestionQuiz>(this.detach_PracticeQuestionQuizs));
			this._QuestionLevel = default(EntityRef<QuestionLevel>);
			this._SchoolLevel = default(EntityRef<SchoolLevel>);
			this._Subject = default(EntityRef<Subject>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_practiceQuestionID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int practiceQuestionID
		{
			get
			{
				return this._practiceQuestionID;
			}
			set
			{
				if ((this._practiceQuestionID != value))
				{
					this.OnpracticeQuestionIDChanging(value);
					this.SendPropertyChanging();
					this._practiceQuestionID = value;
					this.SendPropertyChanged("practiceQuestionID");
					this.OnpracticeQuestionIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_description", DbType="NVarChar(1000)")]
		public string description
		{
			get
			{
				return this._description;
			}
			set
			{
				if ((this._description != value))
				{
					this.OndescriptionChanging(value);
					this.SendPropertyChanging();
					this._description = value;
					this.SendPropertyChanged("description");
					this.OndescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_questionLevelID", DbType="Int")]
		public System.Nullable<int> questionLevelID
		{
			get
			{
				return this._questionLevelID;
			}
			set
			{
				if ((this._questionLevelID != value))
				{
					if (this._QuestionLevel.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnquestionLevelIDChanging(value);
					this.SendPropertyChanging();
					this._questionLevelID = value;
					this.SendPropertyChanged("questionLevelID");
					this.OnquestionLevelIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_subjectID", DbType="Int")]
		public System.Nullable<int> subjectID
		{
			get
			{
				return this._subjectID;
			}
			set
			{
				if ((this._subjectID != value))
				{
					if (this._Subject.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnsubjectIDChanging(value);
					this.SendPropertyChanging();
					this._subjectID = value;
					this.SendPropertyChanged("subjectID");
					this.OnsubjectIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_schoolLevelID", DbType="Int")]
		public System.Nullable<int> schoolLevelID
		{
			get
			{
				return this._schoolLevelID;
			}
			set
			{
				if ((this._schoolLevelID != value))
				{
					if (this._SchoolLevel.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnschoolLevelIDChanging(value);
					this.SendPropertyChanging();
					this._schoolLevelID = value;
					this.SendPropertyChanged("schoolLevelID");
					this.OnschoolLevelIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_contribBy", DbType="VarChar(50)")]
		public string contribBy
		{
			get
			{
				return this._contribBy;
			}
			set
			{
				if ((this._contribBy != value))
				{
					this.OncontribByChanging(value);
					this.SendPropertyChanging();
					this._contribBy = value;
					this.SendPropertyChanged("contribBy");
					this.OncontribByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_verifyBy", DbType="VarChar(50)")]
		public string verifyBy
		{
			get
			{
				return this._verifyBy;
			}
			set
			{
				if ((this._verifyBy != value))
				{
					this.OnverifyByChanging(value);
					this.SendPropertyChanging();
					this._verifyBy = value;
					this.SendPropertyChanged("verifyBy");
					this.OnverifyByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PracticeQuestion_AnswerPracticeQuestion", Storage="_AnswerPracticeQuestions", ThisKey="practiceQuestionID", OtherKey="practiceQuestionID")]
		public EntitySet<AnswerPracticeQuestion> AnswerPracticeQuestions
		{
			get
			{
				return this._AnswerPracticeQuestions;
			}
			set
			{
				this._AnswerPracticeQuestions.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PracticeQuestion_PracticeAnswer", Storage="_PracticeAnswers", ThisKey="practiceQuestionID", OtherKey="practiceQuestionID")]
		public EntitySet<PracticeAnswer> PracticeAnswers
		{
			get
			{
				return this._PracticeAnswers;
			}
			set
			{
				this._PracticeAnswers.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PracticeQuestion_PracticeQuestionQuiz", Storage="_PracticeQuestionQuizs", ThisKey="practiceQuestionID", OtherKey="practiceQuestionID")]
		public EntitySet<PracticeQuestionQuiz> PracticeQuestionQuizs
		{
			get
			{
				return this._PracticeQuestionQuizs;
			}
			set
			{
				this._PracticeQuestionQuizs.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="QuestionLevel_PracticeQuestion", Storage="_QuestionLevel", ThisKey="questionLevelID", OtherKey="questionLevelID", IsForeignKey=true, DeleteRule="SET NULL")]
		public QuestionLevel QuestionLevel
		{
			get
			{
				return this._QuestionLevel.Entity;
			}
			set
			{
				QuestionLevel previousValue = this._QuestionLevel.Entity;
				if (((previousValue != value) 
							|| (this._QuestionLevel.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._QuestionLevel.Entity = null;
						previousValue.PracticeQuestions.Remove(this);
					}
					this._QuestionLevel.Entity = value;
					if ((value != null))
					{
						value.PracticeQuestions.Add(this);
						this._questionLevelID = value.questionLevelID;
					}
					else
					{
						this._questionLevelID = default(Nullable<int>);
					}
					this.SendPropertyChanged("QuestionLevel");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SchoolLevel_PracticeQuestion", Storage="_SchoolLevel", ThisKey="schoolLevelID", OtherKey="schoolLevelID", IsForeignKey=true, DeleteRule="SET NULL")]
		public SchoolLevel SchoolLevel
		{
			get
			{
				return this._SchoolLevel.Entity;
			}
			set
			{
				SchoolLevel previousValue = this._SchoolLevel.Entity;
				if (((previousValue != value) 
							|| (this._SchoolLevel.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._SchoolLevel.Entity = null;
						previousValue.PracticeQuestions.Remove(this);
					}
					this._SchoolLevel.Entity = value;
					if ((value != null))
					{
						value.PracticeQuestions.Add(this);
						this._schoolLevelID = value.schoolLevelID;
					}
					else
					{
						this._schoolLevelID = default(Nullable<int>);
					}
					this.SendPropertyChanged("SchoolLevel");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Subject_PracticeQuestion", Storage="_Subject", ThisKey="subjectID", OtherKey="subjectID", IsForeignKey=true, DeleteRule="SET NULL")]
		public Subject Subject
		{
			get
			{
				return this._Subject.Entity;
			}
			set
			{
				Subject previousValue = this._Subject.Entity;
				if (((previousValue != value) 
							|| (this._Subject.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Subject.Entity = null;
						previousValue.PracticeQuestions.Remove(this);
					}
					this._Subject.Entity = value;
					if ((value != null))
					{
						value.PracticeQuestions.Add(this);
						this._subjectID = value.subjectID;
					}
					else
					{
						this._subjectID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Subject");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_AnswerPracticeQuestions(AnswerPracticeQuestion entity)
		{
			this.SendPropertyChanging();
			entity.PracticeQuestion = this;
		}
		
		private void detach_AnswerPracticeQuestions(AnswerPracticeQuestion entity)
		{
			this.SendPropertyChanging();
			entity.PracticeQuestion = null;
		}
		
		private void attach_PracticeAnswers(PracticeAnswer entity)
		{
			this.SendPropertyChanging();
			entity.PracticeQuestion = this;
		}
		
		private void detach_PracticeAnswers(PracticeAnswer entity)
		{
			this.SendPropertyChanging();
			entity.PracticeQuestion = null;
		}
		
		private void attach_PracticeQuestionQuizs(PracticeQuestionQuiz entity)
		{
			this.SendPropertyChanging();
			entity.PracticeQuestion = this;
		}
		
		private void detach_PracticeQuestionQuizs(PracticeQuestionQuiz entity)
		{
			this.SendPropertyChanging();
			entity.PracticeQuestion = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.PracticeQuestionQuiz")]
	public partial class PracticeQuestionQuiz : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _practiceQuestionID;
		
		private int _quizID;
		
		private EntityRef<PracticeQuestion> _PracticeQuestion;
		
		private EntityRef<Quiz> _Quiz;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnpracticeQuestionIDChanging(int value);
    partial void OnpracticeQuestionIDChanged();
    partial void OnquizIDChanging(int value);
    partial void OnquizIDChanged();
    #endregion
		
		public PracticeQuestionQuiz()
		{
			this._PracticeQuestion = default(EntityRef<PracticeQuestion>);
			this._Quiz = default(EntityRef<Quiz>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_practiceQuestionID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int practiceQuestionID
		{
			get
			{
				return this._practiceQuestionID;
			}
			set
			{
				if ((this._practiceQuestionID != value))
				{
					if (this._PracticeQuestion.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnpracticeQuestionIDChanging(value);
					this.SendPropertyChanging();
					this._practiceQuestionID = value;
					this.SendPropertyChanged("practiceQuestionID");
					this.OnpracticeQuestionIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_quizID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int quizID
		{
			get
			{
				return this._quizID;
			}
			set
			{
				if ((this._quizID != value))
				{
					if (this._Quiz.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnquizIDChanging(value);
					this.SendPropertyChanging();
					this._quizID = value;
					this.SendPropertyChanged("quizID");
					this.OnquizIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PracticeQuestion_PracticeQuestionQuiz", Storage="_PracticeQuestion", ThisKey="practiceQuestionID", OtherKey="practiceQuestionID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public PracticeQuestion PracticeQuestion
		{
			get
			{
				return this._PracticeQuestion.Entity;
			}
			set
			{
				PracticeQuestion previousValue = this._PracticeQuestion.Entity;
				if (((previousValue != value) 
							|| (this._PracticeQuestion.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._PracticeQuestion.Entity = null;
						previousValue.PracticeQuestionQuizs.Remove(this);
					}
					this._PracticeQuestion.Entity = value;
					if ((value != null))
					{
						value.PracticeQuestionQuizs.Add(this);
						this._practiceQuestionID = value.practiceQuestionID;
					}
					else
					{
						this._practiceQuestionID = default(int);
					}
					this.SendPropertyChanged("PracticeQuestion");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Quiz_PracticeQuestionQuiz", Storage="_Quiz", ThisKey="quizID", OtherKey="quizID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Quiz Quiz
		{
			get
			{
				return this._Quiz.Entity;
			}
			set
			{
				Quiz previousValue = this._Quiz.Entity;
				if (((previousValue != value) 
							|| (this._Quiz.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Quiz.Entity = null;
						previousValue.PracticeQuestionQuizs.Remove(this);
					}
					this._Quiz.Entity = value;
					if ((value != null))
					{
						value.PracticeQuestionQuizs.Add(this);
						this._quizID = value.quizID;
					}
					else
					{
						this._quizID = default(int);
					}
					this.SendPropertyChanged("Quiz");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Question")]
	public partial class Question : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _questionID;
		
		private string _description;
		
		private System.Nullable<int> _questionLevelID;
		
		private System.Nullable<int> _subjectID;
		
		private System.Nullable<int> _schoolLevelID;
		
		private string _createBy;
		
		private string _lastModifiedBy;
		
		private EntitySet<Answer> _Answers;
		
		private EntitySet<AnswerQuestion> _AnswerQuestions;
		
		private EntitySet<QuestionQuiz> _QuestionQuizs;
		
		private EntityRef<QuestionLevel> _QuestionLevel;
		
		private EntityRef<SchoolLevel> _SchoolLevel;
		
		private EntityRef<Subject> _Subject;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnquestionIDChanging(int value);
    partial void OnquestionIDChanged();
    partial void OndescriptionChanging(string value);
    partial void OndescriptionChanged();
    partial void OnquestionLevelIDChanging(System.Nullable<int> value);
    partial void OnquestionLevelIDChanged();
    partial void OnsubjectIDChanging(System.Nullable<int> value);
    partial void OnsubjectIDChanged();
    partial void OnschoolLevelIDChanging(System.Nullable<int> value);
    partial void OnschoolLevelIDChanged();
    partial void OncreateByChanging(string value);
    partial void OncreateByChanged();
    partial void OnlastModifiedByChanging(string value);
    partial void OnlastModifiedByChanged();
    #endregion
		
		public Question()
		{
			this._Answers = new EntitySet<Answer>(new Action<Answer>(this.attach_Answers), new Action<Answer>(this.detach_Answers));
			this._AnswerQuestions = new EntitySet<AnswerQuestion>(new Action<AnswerQuestion>(this.attach_AnswerQuestions), new Action<AnswerQuestion>(this.detach_AnswerQuestions));
			this._QuestionQuizs = new EntitySet<QuestionQuiz>(new Action<QuestionQuiz>(this.attach_QuestionQuizs), new Action<QuestionQuiz>(this.detach_QuestionQuizs));
			this._QuestionLevel = default(EntityRef<QuestionLevel>);
			this._SchoolLevel = default(EntityRef<SchoolLevel>);
			this._Subject = default(EntityRef<Subject>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_questionID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int questionID
		{
			get
			{
				return this._questionID;
			}
			set
			{
				if ((this._questionID != value))
				{
					this.OnquestionIDChanging(value);
					this.SendPropertyChanging();
					this._questionID = value;
					this.SendPropertyChanged("questionID");
					this.OnquestionIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_description", DbType="NVarChar(1000)")]
		public string description
		{
			get
			{
				return this._description;
			}
			set
			{
				if ((this._description != value))
				{
					this.OndescriptionChanging(value);
					this.SendPropertyChanging();
					this._description = value;
					this.SendPropertyChanged("description");
					this.OndescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_questionLevelID", DbType="Int")]
		public System.Nullable<int> questionLevelID
		{
			get
			{
				return this._questionLevelID;
			}
			set
			{
				if ((this._questionLevelID != value))
				{
					if (this._QuestionLevel.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnquestionLevelIDChanging(value);
					this.SendPropertyChanging();
					this._questionLevelID = value;
					this.SendPropertyChanged("questionLevelID");
					this.OnquestionLevelIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_subjectID", DbType="Int")]
		public System.Nullable<int> subjectID
		{
			get
			{
				return this._subjectID;
			}
			set
			{
				if ((this._subjectID != value))
				{
					if (this._Subject.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnsubjectIDChanging(value);
					this.SendPropertyChanging();
					this._subjectID = value;
					this.SendPropertyChanged("subjectID");
					this.OnsubjectIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_schoolLevelID", DbType="Int")]
		public System.Nullable<int> schoolLevelID
		{
			get
			{
				return this._schoolLevelID;
			}
			set
			{
				if ((this._schoolLevelID != value))
				{
					if (this._SchoolLevel.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnschoolLevelIDChanging(value);
					this.SendPropertyChanging();
					this._schoolLevelID = value;
					this.SendPropertyChanged("schoolLevelID");
					this.OnschoolLevelIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_createBy", DbType="VarChar(50)")]
		public string createBy
		{
			get
			{
				return this._createBy;
			}
			set
			{
				if ((this._createBy != value))
				{
					this.OncreateByChanging(value);
					this.SendPropertyChanging();
					this._createBy = value;
					this.SendPropertyChanged("createBy");
					this.OncreateByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_lastModifiedBy", DbType="VarChar(50)")]
		public string lastModifiedBy
		{
			get
			{
				return this._lastModifiedBy;
			}
			set
			{
				if ((this._lastModifiedBy != value))
				{
					this.OnlastModifiedByChanging(value);
					this.SendPropertyChanging();
					this._lastModifiedBy = value;
					this.SendPropertyChanged("lastModifiedBy");
					this.OnlastModifiedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Question_Answer", Storage="_Answers", ThisKey="questionID", OtherKey="questionID")]
		public EntitySet<Answer> Answers
		{
			get
			{
				return this._Answers;
			}
			set
			{
				this._Answers.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Question_AnswerQuestion", Storage="_AnswerQuestions", ThisKey="questionID", OtherKey="questionID")]
		public EntitySet<AnswerQuestion> AnswerQuestions
		{
			get
			{
				return this._AnswerQuestions;
			}
			set
			{
				this._AnswerQuestions.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Question_QuestionQuiz", Storage="_QuestionQuizs", ThisKey="questionID", OtherKey="questionID")]
		public EntitySet<QuestionQuiz> QuestionQuizs
		{
			get
			{
				return this._QuestionQuizs;
			}
			set
			{
				this._QuestionQuizs.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="QuestionLevel_Question", Storage="_QuestionLevel", ThisKey="questionLevelID", OtherKey="questionLevelID", IsForeignKey=true, DeleteRule="SET NULL")]
		public QuestionLevel QuestionLevel
		{
			get
			{
				return this._QuestionLevel.Entity;
			}
			set
			{
				QuestionLevel previousValue = this._QuestionLevel.Entity;
				if (((previousValue != value) 
							|| (this._QuestionLevel.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._QuestionLevel.Entity = null;
						previousValue.Questions.Remove(this);
					}
					this._QuestionLevel.Entity = value;
					if ((value != null))
					{
						value.Questions.Add(this);
						this._questionLevelID = value.questionLevelID;
					}
					else
					{
						this._questionLevelID = default(Nullable<int>);
					}
					this.SendPropertyChanged("QuestionLevel");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SchoolLevel_Question", Storage="_SchoolLevel", ThisKey="schoolLevelID", OtherKey="schoolLevelID", IsForeignKey=true, DeleteRule="SET NULL")]
		public SchoolLevel SchoolLevel
		{
			get
			{
				return this._SchoolLevel.Entity;
			}
			set
			{
				SchoolLevel previousValue = this._SchoolLevel.Entity;
				if (((previousValue != value) 
							|| (this._SchoolLevel.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._SchoolLevel.Entity = null;
						previousValue.Questions.Remove(this);
					}
					this._SchoolLevel.Entity = value;
					if ((value != null))
					{
						value.Questions.Add(this);
						this._schoolLevelID = value.schoolLevelID;
					}
					else
					{
						this._schoolLevelID = default(Nullable<int>);
					}
					this.SendPropertyChanged("SchoolLevel");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Subject_Question", Storage="_Subject", ThisKey="subjectID", OtherKey="subjectID", IsForeignKey=true, DeleteRule="SET NULL")]
		public Subject Subject
		{
			get
			{
				return this._Subject.Entity;
			}
			set
			{
				Subject previousValue = this._Subject.Entity;
				if (((previousValue != value) 
							|| (this._Subject.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Subject.Entity = null;
						previousValue.Questions.Remove(this);
					}
					this._Subject.Entity = value;
					if ((value != null))
					{
						value.Questions.Add(this);
						this._subjectID = value.subjectID;
					}
					else
					{
						this._subjectID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Subject");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Answers(Answer entity)
		{
			this.SendPropertyChanging();
			entity.Question = this;
		}
		
		private void detach_Answers(Answer entity)
		{
			this.SendPropertyChanging();
			entity.Question = null;
		}
		
		private void attach_AnswerQuestions(AnswerQuestion entity)
		{
			this.SendPropertyChanging();
			entity.Question = this;
		}
		
		private void detach_AnswerQuestions(AnswerQuestion entity)
		{
			this.SendPropertyChanging();
			entity.Question = null;
		}
		
		private void attach_QuestionQuizs(QuestionQuiz entity)
		{
			this.SendPropertyChanging();
			entity.Question = this;
		}
		
		private void detach_QuestionQuizs(QuestionQuiz entity)
		{
			this.SendPropertyChanging();
			entity.Question = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.QuestionLevel")]
	public partial class QuestionLevel : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _questionLevelID;
		
		private string _description;
		
		private EntitySet<PracticeQuestion> _PracticeQuestions;
		
		private EntitySet<Question> _Questions;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnquestionLevelIDChanging(int value);
    partial void OnquestionLevelIDChanged();
    partial void OndescriptionChanging(string value);
    partial void OndescriptionChanged();
    #endregion
		
		public QuestionLevel()
		{
			this._PracticeQuestions = new EntitySet<PracticeQuestion>(new Action<PracticeQuestion>(this.attach_PracticeQuestions), new Action<PracticeQuestion>(this.detach_PracticeQuestions));
			this._Questions = new EntitySet<Question>(new Action<Question>(this.attach_Questions), new Action<Question>(this.detach_Questions));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_questionLevelID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int questionLevelID
		{
			get
			{
				return this._questionLevelID;
			}
			set
			{
				if ((this._questionLevelID != value))
				{
					this.OnquestionLevelIDChanging(value);
					this.SendPropertyChanging();
					this._questionLevelID = value;
					this.SendPropertyChanged("questionLevelID");
					this.OnquestionLevelIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_description", DbType="NVarChar(50)")]
		public string description
		{
			get
			{
				return this._description;
			}
			set
			{
				if ((this._description != value))
				{
					this.OndescriptionChanging(value);
					this.SendPropertyChanging();
					this._description = value;
					this.SendPropertyChanged("description");
					this.OndescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="QuestionLevel_PracticeQuestion", Storage="_PracticeQuestions", ThisKey="questionLevelID", OtherKey="questionLevelID")]
		public EntitySet<PracticeQuestion> PracticeQuestions
		{
			get
			{
				return this._PracticeQuestions;
			}
			set
			{
				this._PracticeQuestions.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="QuestionLevel_Question", Storage="_Questions", ThisKey="questionLevelID", OtherKey="questionLevelID")]
		public EntitySet<Question> Questions
		{
			get
			{
				return this._Questions;
			}
			set
			{
				this._Questions.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_PracticeQuestions(PracticeQuestion entity)
		{
			this.SendPropertyChanging();
			entity.QuestionLevel = this;
		}
		
		private void detach_PracticeQuestions(PracticeQuestion entity)
		{
			this.SendPropertyChanging();
			entity.QuestionLevel = null;
		}
		
		private void attach_Questions(Question entity)
		{
			this.SendPropertyChanging();
			entity.QuestionLevel = this;
		}
		
		private void detach_Questions(Question entity)
		{
			this.SendPropertyChanging();
			entity.QuestionLevel = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.QuestionQuiz")]
	public partial class QuestionQuiz : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _questionID;
		
		private int _quizID;
		
		private EntityRef<Question> _Question;
		
		private EntityRef<Quiz> _Quiz;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnquestionIDChanging(int value);
    partial void OnquestionIDChanged();
    partial void OnquizIDChanging(int value);
    partial void OnquizIDChanged();
    #endregion
		
		public QuestionQuiz()
		{
			this._Question = default(EntityRef<Question>);
			this._Quiz = default(EntityRef<Quiz>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_questionID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int questionID
		{
			get
			{
				return this._questionID;
			}
			set
			{
				if ((this._questionID != value))
				{
					if (this._Question.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnquestionIDChanging(value);
					this.SendPropertyChanging();
					this._questionID = value;
					this.SendPropertyChanged("questionID");
					this.OnquestionIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_quizID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int quizID
		{
			get
			{
				return this._quizID;
			}
			set
			{
				if ((this._quizID != value))
				{
					if (this._Quiz.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnquizIDChanging(value);
					this.SendPropertyChanging();
					this._quizID = value;
					this.SendPropertyChanged("quizID");
					this.OnquizIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Question_QuestionQuiz", Storage="_Question", ThisKey="questionID", OtherKey="questionID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Question Question
		{
			get
			{
				return this._Question.Entity;
			}
			set
			{
				Question previousValue = this._Question.Entity;
				if (((previousValue != value) 
							|| (this._Question.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Question.Entity = null;
						previousValue.QuestionQuizs.Remove(this);
					}
					this._Question.Entity = value;
					if ((value != null))
					{
						value.QuestionQuizs.Add(this);
						this._questionID = value.questionID;
					}
					else
					{
						this._questionID = default(int);
					}
					this.SendPropertyChanged("Question");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Quiz_QuestionQuiz", Storage="_Quiz", ThisKey="quizID", OtherKey="quizID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Quiz Quiz
		{
			get
			{
				return this._Quiz.Entity;
			}
			set
			{
				Quiz previousValue = this._Quiz.Entity;
				if (((previousValue != value) 
							|| (this._Quiz.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Quiz.Entity = null;
						previousValue.QuestionQuizs.Remove(this);
					}
					this._Quiz.Entity = value;
					if ((value != null))
					{
						value.QuestionQuizs.Add(this);
						this._quizID = value.quizID;
					}
					else
					{
						this._quizID = default(int);
					}
					this.SendPropertyChanged("Quiz");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Quiz")]
	public partial class Quiz : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _quizID;
		
		private System.Nullable<int> _length;
		
		private System.Nullable<bool> _type;
		
		private string _createBy;
		
		private string _lastModifiedBy;
		
		private EntitySet<ExamQuiz> _ExamQuizs;
		
		private EntitySet<PracticeQuestionQuiz> _PracticeQuestionQuizs;
		
		private EntitySet<QuestionQuiz> _QuestionQuizs;
		
		private EntitySet<TakeQuiz> _TakeQuizs;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnquizIDChanging(int value);
    partial void OnquizIDChanged();
    partial void OnlengthChanging(System.Nullable<int> value);
    partial void OnlengthChanged();
    partial void OntypeChanging(System.Nullable<bool> value);
    partial void OntypeChanged();
    partial void OncreateByChanging(string value);
    partial void OncreateByChanged();
    partial void OnlastModifiedByChanging(string value);
    partial void OnlastModifiedByChanged();
    #endregion
		
		public Quiz()
		{
			this._ExamQuizs = new EntitySet<ExamQuiz>(new Action<ExamQuiz>(this.attach_ExamQuizs), new Action<ExamQuiz>(this.detach_ExamQuizs));
			this._PracticeQuestionQuizs = new EntitySet<PracticeQuestionQuiz>(new Action<PracticeQuestionQuiz>(this.attach_PracticeQuestionQuizs), new Action<PracticeQuestionQuiz>(this.detach_PracticeQuestionQuizs));
			this._QuestionQuizs = new EntitySet<QuestionQuiz>(new Action<QuestionQuiz>(this.attach_QuestionQuizs), new Action<QuestionQuiz>(this.detach_QuestionQuizs));
			this._TakeQuizs = new EntitySet<TakeQuiz>(new Action<TakeQuiz>(this.attach_TakeQuizs), new Action<TakeQuiz>(this.detach_TakeQuizs));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_quizID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int quizID
		{
			get
			{
				return this._quizID;
			}
			set
			{
				if ((this._quizID != value))
				{
					this.OnquizIDChanging(value);
					this.SendPropertyChanging();
					this._quizID = value;
					this.SendPropertyChanged("quizID");
					this.OnquizIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_length", DbType="Int")]
		public System.Nullable<int> length
		{
			get
			{
				return this._length;
			}
			set
			{
				if ((this._length != value))
				{
					this.OnlengthChanging(value);
					this.SendPropertyChanging();
					this._length = value;
					this.SendPropertyChanged("length");
					this.OnlengthChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_type", DbType="Bit")]
		public System.Nullable<bool> type
		{
			get
			{
				return this._type;
			}
			set
			{
				if ((this._type != value))
				{
					this.OntypeChanging(value);
					this.SendPropertyChanging();
					this._type = value;
					this.SendPropertyChanged("type");
					this.OntypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_createBy", DbType="VarChar(50)")]
		public string createBy
		{
			get
			{
				return this._createBy;
			}
			set
			{
				if ((this._createBy != value))
				{
					this.OncreateByChanging(value);
					this.SendPropertyChanging();
					this._createBy = value;
					this.SendPropertyChanged("createBy");
					this.OncreateByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_lastModifiedBy", DbType="VarChar(50)")]
		public string lastModifiedBy
		{
			get
			{
				return this._lastModifiedBy;
			}
			set
			{
				if ((this._lastModifiedBy != value))
				{
					this.OnlastModifiedByChanging(value);
					this.SendPropertyChanging();
					this._lastModifiedBy = value;
					this.SendPropertyChanged("lastModifiedBy");
					this.OnlastModifiedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Quiz_ExamQuiz", Storage="_ExamQuizs", ThisKey="quizID", OtherKey="quizID")]
		public EntitySet<ExamQuiz> ExamQuizs
		{
			get
			{
				return this._ExamQuizs;
			}
			set
			{
				this._ExamQuizs.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Quiz_PracticeQuestionQuiz", Storage="_PracticeQuestionQuizs", ThisKey="quizID", OtherKey="quizID")]
		public EntitySet<PracticeQuestionQuiz> PracticeQuestionQuizs
		{
			get
			{
				return this._PracticeQuestionQuizs;
			}
			set
			{
				this._PracticeQuestionQuizs.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Quiz_QuestionQuiz", Storage="_QuestionQuizs", ThisKey="quizID", OtherKey="quizID")]
		public EntitySet<QuestionQuiz> QuestionQuizs
		{
			get
			{
				return this._QuestionQuizs;
			}
			set
			{
				this._QuestionQuizs.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Quiz_TakeQuiz", Storage="_TakeQuizs", ThisKey="quizID", OtherKey="quizID")]
		public EntitySet<TakeQuiz> TakeQuizs
		{
			get
			{
				return this._TakeQuizs;
			}
			set
			{
				this._TakeQuizs.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ExamQuizs(ExamQuiz entity)
		{
			this.SendPropertyChanging();
			entity.Quiz = this;
		}
		
		private void detach_ExamQuizs(ExamQuiz entity)
		{
			this.SendPropertyChanging();
			entity.Quiz = null;
		}
		
		private void attach_PracticeQuestionQuizs(PracticeQuestionQuiz entity)
		{
			this.SendPropertyChanging();
			entity.Quiz = this;
		}
		
		private void detach_PracticeQuestionQuizs(PracticeQuestionQuiz entity)
		{
			this.SendPropertyChanging();
			entity.Quiz = null;
		}
		
		private void attach_QuestionQuizs(QuestionQuiz entity)
		{
			this.SendPropertyChanging();
			entity.Quiz = this;
		}
		
		private void detach_QuestionQuizs(QuestionQuiz entity)
		{
			this.SendPropertyChanging();
			entity.Quiz = null;
		}
		
		private void attach_TakeQuizs(TakeQuiz entity)
		{
			this.SendPropertyChanging();
			entity.Quiz = this;
		}
		
		private void detach_TakeQuizs(TakeQuiz entity)
		{
			this.SendPropertyChanging();
			entity.Quiz = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Role")]
	public partial class Role : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _roleID;
		
		private string _description;
		
		private EntitySet<User> _Users;
		
		private EntitySet<RoleFormControl> _RoleFormControls;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnroleIDChanging(int value);
    partial void OnroleIDChanged();
    partial void OndescriptionChanging(string value);
    partial void OndescriptionChanged();
    #endregion
		
		public Role()
		{
			this._Users = new EntitySet<User>(new Action<User>(this.attach_Users), new Action<User>(this.detach_Users));
			this._RoleFormControls = new EntitySet<RoleFormControl>(new Action<RoleFormControl>(this.attach_RoleFormControls), new Action<RoleFormControl>(this.detach_RoleFormControls));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_roleID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int roleID
		{
			get
			{
				return this._roleID;
			}
			set
			{
				if ((this._roleID != value))
				{
					this.OnroleIDChanging(value);
					this.SendPropertyChanging();
					this._roleID = value;
					this.SendPropertyChanged("roleID");
					this.OnroleIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_description", DbType="NVarChar(50)")]
		public string description
		{
			get
			{
				return this._description;
			}
			set
			{
				if ((this._description != value))
				{
					this.OndescriptionChanging(value);
					this.SendPropertyChanging();
					this._description = value;
					this.SendPropertyChanged("description");
					this.OndescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Role_User", Storage="_Users", ThisKey="roleID", OtherKey="roleID")]
		public EntitySet<User> Users
		{
			get
			{
				return this._Users;
			}
			set
			{
				this._Users.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Role_RoleFormControl", Storage="_RoleFormControls", ThisKey="roleID", OtherKey="roleID")]
		public EntitySet<RoleFormControl> RoleFormControls
		{
			get
			{
				return this._RoleFormControls;
			}
			set
			{
				this._RoleFormControls.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Users(User entity)
		{
			this.SendPropertyChanging();
			entity.Role = this;
		}
		
		private void detach_Users(User entity)
		{
			this.SendPropertyChanging();
			entity.Role = null;
		}
		
		private void attach_RoleFormControls(RoleFormControl entity)
		{
			this.SendPropertyChanging();
			entity.Role = this;
		}
		
		private void detach_RoleFormControls(RoleFormControl entity)
		{
			this.SendPropertyChanging();
			entity.Role = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.RoleFormControl")]
	public partial class RoleFormControl : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _roleID;
		
		private string _form;
		
		private string _control;
		
		private System.Nullable<bool> _invisible;
		
		private System.Nullable<bool> _disable;
		
		private EntityRef<FormControl> _FormControl;
		
		private EntityRef<Role> _Role;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnroleIDChanging(int value);
    partial void OnroleIDChanged();
    partial void OnformChanging(string value);
    partial void OnformChanged();
    partial void OncontrolChanging(string value);
    partial void OncontrolChanged();
    partial void OninvisibleChanging(System.Nullable<bool> value);
    partial void OninvisibleChanged();
    partial void OndisableChanging(System.Nullable<bool> value);
    partial void OndisableChanged();
    #endregion
		
		public RoleFormControl()
		{
			this._FormControl = default(EntityRef<FormControl>);
			this._Role = default(EntityRef<Role>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_roleID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int roleID
		{
			get
			{
				return this._roleID;
			}
			set
			{
				if ((this._roleID != value))
				{
					if (this._Role.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnroleIDChanging(value);
					this.SendPropertyChanging();
					this._roleID = value;
					this.SendPropertyChanged("roleID");
					this.OnroleIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_form", DbType="VarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string form
		{
			get
			{
				return this._form;
			}
			set
			{
				if ((this._form != value))
				{
					if (this._FormControl.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnformChanging(value);
					this.SendPropertyChanging();
					this._form = value;
					this.SendPropertyChanged("form");
					this.OnformChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_control", DbType="VarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string control
		{
			get
			{
				return this._control;
			}
			set
			{
				if ((this._control != value))
				{
					if (this._FormControl.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OncontrolChanging(value);
					this.SendPropertyChanging();
					this._control = value;
					this.SendPropertyChanged("control");
					this.OncontrolChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_invisible", DbType="Bit")]
		public System.Nullable<bool> invisible
		{
			get
			{
				return this._invisible;
			}
			set
			{
				if ((this._invisible != value))
				{
					this.OninvisibleChanging(value);
					this.SendPropertyChanging();
					this._invisible = value;
					this.SendPropertyChanged("invisible");
					this.OninvisibleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_disable", DbType="Bit")]
		public System.Nullable<bool> disable
		{
			get
			{
				return this._disable;
			}
			set
			{
				if ((this._disable != value))
				{
					this.OndisableChanging(value);
					this.SendPropertyChanging();
					this._disable = value;
					this.SendPropertyChanged("disable");
					this.OndisableChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FormControl_RoleFormControl", Storage="_FormControl", ThisKey="form,control", OtherKey="form,control", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public FormControl FormControl
		{
			get
			{
				return this._FormControl.Entity;
			}
			set
			{
				FormControl previousValue = this._FormControl.Entity;
				if (((previousValue != value) 
							|| (this._FormControl.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._FormControl.Entity = null;
						previousValue.RoleFormControls.Remove(this);
					}
					this._FormControl.Entity = value;
					if ((value != null))
					{
						value.RoleFormControls.Add(this);
						this._form = value.form;
						this._control = value.control;
					}
					else
					{
						this._form = default(string);
						this._control = default(string);
					}
					this.SendPropertyChanged("FormControl");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Role_RoleFormControl", Storage="_Role", ThisKey="roleID", OtherKey="roleID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Role Role
		{
			get
			{
				return this._Role.Entity;
			}
			set
			{
				Role previousValue = this._Role.Entity;
				if (((previousValue != value) 
							|| (this._Role.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Role.Entity = null;
						previousValue.RoleFormControls.Remove(this);
					}
					this._Role.Entity = value;
					if ((value != null))
					{
						value.RoleFormControls.Add(this);
						this._roleID = value.roleID;
					}
					else
					{
						this._roleID = default(int);
					}
					this.SendPropertyChanged("Role");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.RoleForSignup")]
	public partial class RoleForSignup : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _roleID;
		
		private string _description;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnroleIDChanging(int value);
    partial void OnroleIDChanged();
    partial void OndescriptionChanging(string value);
    partial void OndescriptionChanged();
    #endregion
		
		public RoleForSignup()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_roleID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int roleID
		{
			get
			{
				return this._roleID;
			}
			set
			{
				if ((this._roleID != value))
				{
					this.OnroleIDChanging(value);
					this.SendPropertyChanging();
					this._roleID = value;
					this.SendPropertyChanged("roleID");
					this.OnroleIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_description", DbType="NVarChar(50)")]
		public string description
		{
			get
			{
				return this._description;
			}
			set
			{
				if ((this._description != value))
				{
					this.OndescriptionChanging(value);
					this.SendPropertyChanging();
					this._description = value;
					this.SendPropertyChanged("description");
					this.OndescriptionChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.SchoolLevel")]
	public partial class SchoolLevel : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _schoolLevelID;
		
		private string _description;
		
		private EntitySet<Class> _Classes;
		
		private EntitySet<PracticeQuestion> _PracticeQuestions;
		
		private EntitySet<Question> _Questions;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnschoolLevelIDChanging(int value);
    partial void OnschoolLevelIDChanged();
    partial void OndescriptionChanging(string value);
    partial void OndescriptionChanged();
    #endregion
		
		public SchoolLevel()
		{
			this._Classes = new EntitySet<Class>(new Action<Class>(this.attach_Classes), new Action<Class>(this.detach_Classes));
			this._PracticeQuestions = new EntitySet<PracticeQuestion>(new Action<PracticeQuestion>(this.attach_PracticeQuestions), new Action<PracticeQuestion>(this.detach_PracticeQuestions));
			this._Questions = new EntitySet<Question>(new Action<Question>(this.attach_Questions), new Action<Question>(this.detach_Questions));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_schoolLevelID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int schoolLevelID
		{
			get
			{
				return this._schoolLevelID;
			}
			set
			{
				if ((this._schoolLevelID != value))
				{
					this.OnschoolLevelIDChanging(value);
					this.SendPropertyChanging();
					this._schoolLevelID = value;
					this.SendPropertyChanged("schoolLevelID");
					this.OnschoolLevelIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_description", DbType="NVarChar(50)")]
		public string description
		{
			get
			{
				return this._description;
			}
			set
			{
				if ((this._description != value))
				{
					this.OndescriptionChanging(value);
					this.SendPropertyChanging();
					this._description = value;
					this.SendPropertyChanged("description");
					this.OndescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SchoolLevel_Class", Storage="_Classes", ThisKey="schoolLevelID", OtherKey="schoolLevelID")]
		public EntitySet<Class> Classes
		{
			get
			{
				return this._Classes;
			}
			set
			{
				this._Classes.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SchoolLevel_PracticeQuestion", Storage="_PracticeQuestions", ThisKey="schoolLevelID", OtherKey="schoolLevelID")]
		public EntitySet<PracticeQuestion> PracticeQuestions
		{
			get
			{
				return this._PracticeQuestions;
			}
			set
			{
				this._PracticeQuestions.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SchoolLevel_Question", Storage="_Questions", ThisKey="schoolLevelID", OtherKey="schoolLevelID")]
		public EntitySet<Question> Questions
		{
			get
			{
				return this._Questions;
			}
			set
			{
				this._Questions.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Classes(Class entity)
		{
			this.SendPropertyChanging();
			entity.SchoolLevel = this;
		}
		
		private void detach_Classes(Class entity)
		{
			this.SendPropertyChanging();
			entity.SchoolLevel = null;
		}
		
		private void attach_PracticeQuestions(PracticeQuestion entity)
		{
			this.SendPropertyChanging();
			entity.SchoolLevel = this;
		}
		
		private void detach_PracticeQuestions(PracticeQuestion entity)
		{
			this.SendPropertyChanging();
			entity.SchoolLevel = null;
		}
		
		private void attach_Questions(Question entity)
		{
			this.SendPropertyChanging();
			entity.SchoolLevel = this;
		}
		
		private void detach_Questions(Question entity)
		{
			this.SendPropertyChanging();
			entity.SchoolLevel = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Student")]
	public partial class Student : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _studentID;
		
		private string _name;
		
		private System.Nullable<System.DateTime> _dateOfBirth;
		
		private System.Nullable<int> _classID;
		
		private EntitySet<StudentUser> _StudentUsers;
		
		private EntityRef<Class> _Class;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnstudentIDChanging(string value);
    partial void OnstudentIDChanged();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    partial void OndateOfBirthChanging(System.Nullable<System.DateTime> value);
    partial void OndateOfBirthChanged();
    partial void OnclassIDChanging(System.Nullable<int> value);
    partial void OnclassIDChanged();
    #endregion
		
		public Student()
		{
			this._StudentUsers = new EntitySet<StudentUser>(new Action<StudentUser>(this.attach_StudentUsers), new Action<StudentUser>(this.detach_StudentUsers));
			this._Class = default(EntityRef<Class>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_studentID", DbType="VarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string studentID
		{
			get
			{
				return this._studentID;
			}
			set
			{
				if ((this._studentID != value))
				{
					this.OnstudentIDChanging(value);
					this.SendPropertyChanging();
					this._studentID = value;
					this.SendPropertyChanged("studentID");
					this.OnstudentIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_name", DbType="NVarChar(100)")]
		public string name
		{
			get
			{
				return this._name;
			}
			set
			{
				if ((this._name != value))
				{
					this.OnnameChanging(value);
					this.SendPropertyChanging();
					this._name = value;
					this.SendPropertyChanged("name");
					this.OnnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_dateOfBirth", DbType="Date")]
		public System.Nullable<System.DateTime> dateOfBirth
		{
			get
			{
				return this._dateOfBirth;
			}
			set
			{
				if ((this._dateOfBirth != value))
				{
					this.OndateOfBirthChanging(value);
					this.SendPropertyChanging();
					this._dateOfBirth = value;
					this.SendPropertyChanged("dateOfBirth");
					this.OndateOfBirthChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_classID", DbType="Int")]
		public System.Nullable<int> classID
		{
			get
			{
				return this._classID;
			}
			set
			{
				if ((this._classID != value))
				{
					if (this._Class.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnclassIDChanging(value);
					this.SendPropertyChanging();
					this._classID = value;
					this.SendPropertyChanged("classID");
					this.OnclassIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Student_StudentUser", Storage="_StudentUsers", ThisKey="studentID", OtherKey="studentID")]
		public EntitySet<StudentUser> StudentUsers
		{
			get
			{
				return this._StudentUsers;
			}
			set
			{
				this._StudentUsers.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Class_Student", Storage="_Class", ThisKey="classID", OtherKey="classID", IsForeignKey=true, DeleteRule="SET NULL")]
		public Class Class
		{
			get
			{
				return this._Class.Entity;
			}
			set
			{
				Class previousValue = this._Class.Entity;
				if (((previousValue != value) 
							|| (this._Class.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Class.Entity = null;
						previousValue.Students.Remove(this);
					}
					this._Class.Entity = value;
					if ((value != null))
					{
						value.Students.Add(this);
						this._classID = value.classID;
					}
					else
					{
						this._classID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Class");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_StudentUsers(StudentUser entity)
		{
			this.SendPropertyChanging();
			entity.Student = this;
		}
		
		private void detach_StudentUsers(StudentUser entity)
		{
			this.SendPropertyChanging();
			entity.Student = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.StudentUser")]
	public partial class StudentUser : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _username;
		
		private string _studentID;
		
		private EntityRef<User> _User;
		
		private EntityRef<Student> _Student;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnusernameChanging(string value);
    partial void OnusernameChanged();
    partial void OnstudentIDChanging(string value);
    partial void OnstudentIDChanged();
    #endregion
		
		public StudentUser()
		{
			this._User = default(EntityRef<User>);
			this._Student = default(EntityRef<Student>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_username", DbType="VarChar(20) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string username
		{
			get
			{
				return this._username;
			}
			set
			{
				if ((this._username != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnusernameChanging(value);
					this.SendPropertyChanging();
					this._username = value;
					this.SendPropertyChanged("username");
					this.OnusernameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_studentID", DbType="VarChar(50)")]
		public string studentID
		{
			get
			{
				return this._studentID;
			}
			set
			{
				if ((this._studentID != value))
				{
					if (this._Student.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnstudentIDChanging(value);
					this.SendPropertyChanging();
					this._studentID = value;
					this.SendPropertyChanged("studentID");
					this.OnstudentIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_StudentUser", Storage="_User", ThisKey="username", OtherKey="username", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.StudentUser = null;
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.StudentUser = this;
						this._username = value.username;
					}
					else
					{
						this._username = default(string);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Student_StudentUser", Storage="_Student", ThisKey="studentID", OtherKey="studentID", IsForeignKey=true, DeleteRule="CASCADE")]
		public Student Student
		{
			get
			{
				return this._Student.Entity;
			}
			set
			{
				Student previousValue = this._Student.Entity;
				if (((previousValue != value) 
							|| (this._Student.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Student.Entity = null;
						previousValue.StudentUsers.Remove(this);
					}
					this._Student.Entity = value;
					if ((value != null))
					{
						value.StudentUsers.Add(this);
						this._studentID = value.studentID;
					}
					else
					{
						this._studentID = default(string);
					}
					this.SendPropertyChanged("Student");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Subject")]
	public partial class Subject : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _subjectID;
		
		private string _name;
		
		private EntitySet<PracticeQuestion> _PracticeQuestions;
		
		private EntitySet<Question> _Questions;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnsubjectIDChanging(int value);
    partial void OnsubjectIDChanged();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    #endregion
		
		public Subject()
		{
			this._PracticeQuestions = new EntitySet<PracticeQuestion>(new Action<PracticeQuestion>(this.attach_PracticeQuestions), new Action<PracticeQuestion>(this.detach_PracticeQuestions));
			this._Questions = new EntitySet<Question>(new Action<Question>(this.attach_Questions), new Action<Question>(this.detach_Questions));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_subjectID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int subjectID
		{
			get
			{
				return this._subjectID;
			}
			set
			{
				if ((this._subjectID != value))
				{
					this.OnsubjectIDChanging(value);
					this.SendPropertyChanging();
					this._subjectID = value;
					this.SendPropertyChanged("subjectID");
					this.OnsubjectIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_name", DbType="NVarChar(50)")]
		public string name
		{
			get
			{
				return this._name;
			}
			set
			{
				if ((this._name != value))
				{
					this.OnnameChanging(value);
					this.SendPropertyChanging();
					this._name = value;
					this.SendPropertyChanged("name");
					this.OnnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Subject_PracticeQuestion", Storage="_PracticeQuestions", ThisKey="subjectID", OtherKey="subjectID")]
		public EntitySet<PracticeQuestion> PracticeQuestions
		{
			get
			{
				return this._PracticeQuestions;
			}
			set
			{
				this._PracticeQuestions.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Subject_Question", Storage="_Questions", ThisKey="subjectID", OtherKey="subjectID")]
		public EntitySet<Question> Questions
		{
			get
			{
				return this._Questions;
			}
			set
			{
				this._Questions.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_PracticeQuestions(PracticeQuestion entity)
		{
			this.SendPropertyChanging();
			entity.Subject = this;
		}
		
		private void detach_PracticeQuestions(PracticeQuestion entity)
		{
			this.SendPropertyChanging();
			entity.Subject = null;
		}
		
		private void attach_Questions(Question entity)
		{
			this.SendPropertyChanging();
			entity.Subject = this;
		}
		
		private void detach_Questions(Question entity)
		{
			this.SendPropertyChanging();
			entity.Subject = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.TakeQuiz")]
	public partial class TakeQuiz : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _username;
		
		private int _quizID;
		
		private System.DateTime _dateAttempt;
		
		private System.Nullable<double> _grade;
		
		private EntityRef<Quiz> _Quiz;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnusernameChanging(string value);
    partial void OnusernameChanged();
    partial void OnquizIDChanging(int value);
    partial void OnquizIDChanged();
    partial void OndateAttemptChanging(System.DateTime value);
    partial void OndateAttemptChanged();
    partial void OngradeChanging(System.Nullable<double> value);
    partial void OngradeChanged();
    #endregion
		
		public TakeQuiz()
		{
			this._Quiz = default(EntityRef<Quiz>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_username", DbType="VarChar(20) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string username
		{
			get
			{
				return this._username;
			}
			set
			{
				if ((this._username != value))
				{
					this.OnusernameChanging(value);
					this.SendPropertyChanging();
					this._username = value;
					this.SendPropertyChanged("username");
					this.OnusernameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_quizID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int quizID
		{
			get
			{
				return this._quizID;
			}
			set
			{
				if ((this._quizID != value))
				{
					if (this._Quiz.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnquizIDChanging(value);
					this.SendPropertyChanging();
					this._quizID = value;
					this.SendPropertyChanged("quizID");
					this.OnquizIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_dateAttempt", DbType="Date NOT NULL", IsPrimaryKey=true)]
		public System.DateTime dateAttempt
		{
			get
			{
				return this._dateAttempt;
			}
			set
			{
				if ((this._dateAttempt != value))
				{
					this.OndateAttemptChanging(value);
					this.SendPropertyChanging();
					this._dateAttempt = value;
					this.SendPropertyChanged("dateAttempt");
					this.OndateAttemptChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_grade", DbType="Float")]
		public System.Nullable<double> grade
		{
			get
			{
				return this._grade;
			}
			set
			{
				if ((this._grade != value))
				{
					this.OngradeChanging(value);
					this.SendPropertyChanging();
					this._grade = value;
					this.SendPropertyChanged("grade");
					this.OngradeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Quiz_TakeQuiz", Storage="_Quiz", ThisKey="quizID", OtherKey="quizID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Quiz Quiz
		{
			get
			{
				return this._Quiz.Entity;
			}
			set
			{
				Quiz previousValue = this._Quiz.Entity;
				if (((previousValue != value) 
							|| (this._Quiz.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Quiz.Entity = null;
						previousValue.TakeQuizs.Remove(this);
					}
					this._Quiz.Entity = value;
					if ((value != null))
					{
						value.TakeQuizs.Add(this);
						this._quizID = value.quizID;
					}
					else
					{
						this._quizID = default(int);
					}
					this.SendPropertyChanged("Quiz");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.TakeQuizInExam")]
	public partial class TakeQuizInExam : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _username;
		
		private int _examID;
		
		private int _quizID;
		
		private System.Nullable<System.DateTime> _schedule;
		
		private EntityRef<ExamQuiz> _ExamQuiz;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnusernameChanging(string value);
    partial void OnusernameChanged();
    partial void OnexamIDChanging(int value);
    partial void OnexamIDChanged();
    partial void OnquizIDChanging(int value);
    partial void OnquizIDChanged();
    partial void OnscheduleChanging(System.Nullable<System.DateTime> value);
    partial void OnscheduleChanged();
    #endregion
		
		public TakeQuizInExam()
		{
			this._ExamQuiz = default(EntityRef<ExamQuiz>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_username", DbType="VarChar(20) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string username
		{
			get
			{
				return this._username;
			}
			set
			{
				if ((this._username != value))
				{
					this.OnusernameChanging(value);
					this.SendPropertyChanging();
					this._username = value;
					this.SendPropertyChanged("username");
					this.OnusernameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_examID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int examID
		{
			get
			{
				return this._examID;
			}
			set
			{
				if ((this._examID != value))
				{
					if (this._ExamQuiz.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnexamIDChanging(value);
					this.SendPropertyChanging();
					this._examID = value;
					this.SendPropertyChanged("examID");
					this.OnexamIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_quizID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int quizID
		{
			get
			{
				return this._quizID;
			}
			set
			{
				if ((this._quizID != value))
				{
					if (this._ExamQuiz.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnquizIDChanging(value);
					this.SendPropertyChanging();
					this._quizID = value;
					this.SendPropertyChanged("quizID");
					this.OnquizIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_schedule", DbType="DateTime")]
		public System.Nullable<System.DateTime> schedule
		{
			get
			{
				return this._schedule;
			}
			set
			{
				if ((this._schedule != value))
				{
					this.OnscheduleChanging(value);
					this.SendPropertyChanging();
					this._schedule = value;
					this.SendPropertyChanged("schedule");
					this.OnscheduleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ExamQuiz_TakeQuizInExam", Storage="_ExamQuiz", ThisKey="quizID,examID", OtherKey="quizID,examID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public ExamQuiz ExamQuiz
		{
			get
			{
				return this._ExamQuiz.Entity;
			}
			set
			{
				ExamQuiz previousValue = this._ExamQuiz.Entity;
				if (((previousValue != value) 
							|| (this._ExamQuiz.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ExamQuiz.Entity = null;
						previousValue.TakeQuizInExams.Remove(this);
					}
					this._ExamQuiz.Entity = value;
					if ((value != null))
					{
						value.TakeQuizInExams.Add(this);
						this._quizID = value.quizID;
						this._examID = value.examID;
					}
					else
					{
						this._quizID = default(int);
						this._examID = default(int);
					}
					this.SendPropertyChanged("ExamQuiz");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Teacher")]
	public partial class Teacher : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _teacherID;
		
		private string _name;
		
		private System.Nullable<System.DateTime> _dateOfBirth;
		
		private EntitySet<TeacherUser> _TeacherUsers;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnteacherIDChanging(string value);
    partial void OnteacherIDChanged();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    partial void OndateOfBirthChanging(System.Nullable<System.DateTime> value);
    partial void OndateOfBirthChanged();
    #endregion
		
		public Teacher()
		{
			this._TeacherUsers = new EntitySet<TeacherUser>(new Action<TeacherUser>(this.attach_TeacherUsers), new Action<TeacherUser>(this.detach_TeacherUsers));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_teacherID", DbType="VarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string teacherID
		{
			get
			{
				return this._teacherID;
			}
			set
			{
				if ((this._teacherID != value))
				{
					this.OnteacherIDChanging(value);
					this.SendPropertyChanging();
					this._teacherID = value;
					this.SendPropertyChanged("teacherID");
					this.OnteacherIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_name", DbType="NVarChar(100)")]
		public string name
		{
			get
			{
				return this._name;
			}
			set
			{
				if ((this._name != value))
				{
					this.OnnameChanging(value);
					this.SendPropertyChanging();
					this._name = value;
					this.SendPropertyChanged("name");
					this.OnnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_dateOfBirth", DbType="Date")]
		public System.Nullable<System.DateTime> dateOfBirth
		{
			get
			{
				return this._dateOfBirth;
			}
			set
			{
				if ((this._dateOfBirth != value))
				{
					this.OndateOfBirthChanging(value);
					this.SendPropertyChanging();
					this._dateOfBirth = value;
					this.SendPropertyChanged("dateOfBirth");
					this.OndateOfBirthChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Teacher_TeacherUser", Storage="_TeacherUsers", ThisKey="teacherID", OtherKey="teacherID")]
		public EntitySet<TeacherUser> TeacherUsers
		{
			get
			{
				return this._TeacherUsers;
			}
			set
			{
				this._TeacherUsers.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_TeacherUsers(TeacherUser entity)
		{
			this.SendPropertyChanging();
			entity.Teacher = this;
		}
		
		private void detach_TeacherUsers(TeacherUser entity)
		{
			this.SendPropertyChanging();
			entity.Teacher = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.TeacherUser")]
	public partial class TeacherUser : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _username;
		
		private string _teacherID;
		
		private EntityRef<User> _User;
		
		private EntityRef<Teacher> _Teacher;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnusernameChanging(string value);
    partial void OnusernameChanged();
    partial void OnteacherIDChanging(string value);
    partial void OnteacherIDChanged();
    #endregion
		
		public TeacherUser()
		{
			this._User = default(EntityRef<User>);
			this._Teacher = default(EntityRef<Teacher>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_username", DbType="VarChar(20) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string username
		{
			get
			{
				return this._username;
			}
			set
			{
				if ((this._username != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnusernameChanging(value);
					this.SendPropertyChanging();
					this._username = value;
					this.SendPropertyChanged("username");
					this.OnusernameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_teacherID", DbType="VarChar(50)")]
		public string teacherID
		{
			get
			{
				return this._teacherID;
			}
			set
			{
				if ((this._teacherID != value))
				{
					if (this._Teacher.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnteacherIDChanging(value);
					this.SendPropertyChanging();
					this._teacherID = value;
					this.SendPropertyChanged("teacherID");
					this.OnteacherIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_TeacherUser", Storage="_User", ThisKey="username", OtherKey="username", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.TeacherUser = null;
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.TeacherUser = this;
						this._username = value.username;
					}
					else
					{
						this._username = default(string);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Teacher_TeacherUser", Storage="_Teacher", ThisKey="teacherID", OtherKey="teacherID", IsForeignKey=true, DeleteRule="CASCADE")]
		public Teacher Teacher
		{
			get
			{
				return this._Teacher.Entity;
			}
			set
			{
				Teacher previousValue = this._Teacher.Entity;
				if (((previousValue != value) 
							|| (this._Teacher.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Teacher.Entity = null;
						previousValue.TeacherUsers.Remove(this);
					}
					this._Teacher.Entity = value;
					if ((value != null))
					{
						value.TeacherUsers.Add(this);
						this._teacherID = value.teacherID;
					}
					else
					{
						this._teacherID = default(string);
					}
					this.SendPropertyChanged("Teacher");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
